###############################################################################
## Bazel Configuration Flags
##
## `.bazelrc` is a Bazel configuration file.
## https://bazel.build/docs/best-practices#bazelrc-file
###############################################################################

## Platform specific settings

build --enable_platform_specific_config

build:linux --action_env=CC=clang --action_env=CXX=clang++
build:linux --cxxopt=-std=c++23 --host_cxxopt=-std=c++23

build:macos --action_env=CC=clang --action_env=CXX=clang++
build:macos --cxxopt=-std=c++23 --host_cxxopt=-std=c++23

startup --windows_enable_symlinks
build:windows --enable_runfiles
build:windows --extra_toolchains=@local_config_cc//:cc-toolchain-x64_windows-clang-cl
build:windows --extra_execution_platforms=//:x64_windows-clang-cl
build:windows --cxxopt='/std:c++23preview' --host_cxxopt='/std:c++23preview'
build:windows --copt='/D_CRT_USE_BUILTIN_OFFSETOF' --host_copt='/D_CRT_USE_BUILTIN_OFFSETOF'
build:windows --copt='/DWIN32_LEAN_AND_MEAN' --host_copt='/DWIN32_LEAN_AND_MEAN'
build:windows --cxxopt='/Zc:__cplusplus' --host_cxxopt='/Zc:__cplusplus'
build:windows --copt='/Zc:dllexportInlines-' --host_copt='/Zc:dllexportInlines-'

## Top-level configurations

build:clippy --aspects=@rules_rust//rust:defs.bzl%rust_clippy_aspect
build:clippy --output_groups=+clippy_checks
build:clippy  --@rules_rust//:clippy_flags=-Dclippy::all,-Dclippy::pedantic,-Dwarnings

## Sanitizers

build:sanitizer-common --copt="-fsanitize-link-c++-runtime" --linkopt="-fsanitize-link-c++-runtime"
build:sanitizer-common --copt="-Og"
build:sanitizer-common --copt="-g" --strip=never
build:sanitizer-common --copt="-fno-optimize-sibling-calls"
build:sanitizer-common --copt="-fno-omit-frame-pointer" --copt="-mno-omit-leaf-frame-pointer"

# Address sanitizer (https://github.com/google/sanitizers/wiki/AddressSanitizer)
build:asan --config=sanitizer-common
build:asan --copt="-fsanitize=address" --linkopt="-fsanitize=address"
build:asan --test_env=ASAN_OPTIONS=abort_on_error=true
build:asan --test_env=LSAN_OPTIONS=report_objects=1
build:asan --test_env=KJ_CLEAN_SHUTDOWN=1

# Benchmarking configuration

build:bench -c opt
build:bench --copt="-O3"
build:bench --copt="-DNDEBUG"
build:bench --@capnp-cpp//src/capnp:capnp_no_inline_accessors=False
build:bench --copt="-flto=thin" --linkopt="-flto=thin"
build:bench --@rules_rust//rust/toolchain/channel=nightly
build:bench --@rules_rust//:extra_rustc_flag=-Zdylib-lto
build:bench --@rules_rust//:extra_rustc_flag=-Cembed-bitcode
build:bench --@rules_rust//:extra_rustc_flag=-Clto=thin
build:bench --@rules_rust//:extra_rustc_flag=-Ccodegen-units=1

###############################################################################
## Custom user flags
##
## This should always be the last thing in the `.bazelrc` file to ensure
## consistent behavior when setting flags in that file as `.bazelrc` files are
## evaluated top to bottom.
###############################################################################

try-import %workspace%/user.bazelrc
